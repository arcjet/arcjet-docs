---
import { format } from "prettier";
import { Code } from "@astrojs/starlight/components";
import twoslasher from "@/lib/twoslasher";

const generics = Array.isArray(Astro.props.generics) && Astro.props.generics.length > 0
    ? `<${Astro.props.generics.join(", ")}>`
    : ''

const snippet = `
import type { Simplify } from "type-fest";
import type { ${Astro.props.type} as __Dummy } from "${Astro.props.from}";
type ${Astro.props.type}${generics} = Simplify<__Dummy${generics}>;
//   ^?
`

const result = twoslasher(snippet, "ts");

let types = [];
for (const query of result.queries) {
    types.push(query.text);
}

const unformatted = types.join("\n");

let code: string;
try {
    code = await format(unformatted, { parser: "typescript" });
} catch (cause) {
    throw new Error(
        `<DisplayType type="${Astro.props.type}" from="${Astro.props.from}">: prettier formatting failed for:\n\n${unformatted}`,
        { cause },
    );
}
---

<Code code={code} lang="ts" />
